Approach:
insert at the end of the heap
then take it to its correct position  by comparing to its parent node

class heap{
 public:
  
  int arr[100];
  int size;
  
  heap(){  // constructor to initialize arr and size
   arr[0]= -1;
   size=0;
  }
void insert(int val){
   size= size+1;
   int index= size;
   arr[index]= val;
   
 while(index > 1){
    int parent = index/2;
    
 if(arr[parent] < arr[index]){
     swap(arr[parent], arr[index]);
     index= parent;
     }
 else{
       return;
     }
   }
 }
 void print(){
  for(int i=1; i<=size; i++){
     cout<< arr[i]<< " ";
  }
     cout<<endl;
  }
};

int main (){
 heap h;
 
 h.insert(50);
 h.insert(60);
 h.insert(70);
 h.insert(80);
 h.insert(90);
 h.insert(55);
 
 h.print();
 return 0;
 }
