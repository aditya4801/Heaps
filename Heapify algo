Approach:
In a complete binary tree leaf nodes are always heap max or min
so leaf nodes are from n/2+1 to nth node considering 0 based indexing 
we need to check from mid to 0 and heapify it.

void heapify(int arr[], int n, int i){
 int largest= i;
 int left= 2*i;
 int right= 2*i+1;
 
if(left < n && arr[largest] < arr[left]){
 largest = left; 
  }
if(right < n && arr[largest] < arr[right]){
 largest= right;
  }
if(largest != i){
 swap (arr[largest], arr[i]);
  heapify(arr, n ,largest);
 }
}

int main(){
 int arr[6]= {1,3,4,5,6,3,2,};
for(int i= n/2; i > 0; i--){
  heapify(arr,n,i);
  }
}
