class data{
    public:
        int val;
        int row;
        int col;
        
    data(int d, int r, int c){
        val = d;
        row = r;
        col = c;
    }
};

class compare{
  public:
    bool operator()(data a, data b){
        return a.val > b.val;
    }
};

class Solution{
    public:
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
          int mini=INT_MAX, maxi=INT_MIN;
          priority_queue<data, vector<data>, compare> minHeap;
          
          for(int i=0; i<k; i++){
              int ele = KSortedArray[i][0];
              data curr(ele, i, 0);
              mini = min(ele, mini);
              maxi = max(ele, maxi);
              minHeap.push(curr);
          }
          
          int start = mini;
          int end = maxi;
          
          while(!minHeap.empty()){
              data top = minHeap.top();
              minHeap.pop();
              
              // update mini value
              mini = top.val;
              
              if((maxi-mini) < (end-start)){
                  // update the range
                  start = mini;
                  end = maxi;
              }
              
              int row = top.row;
              int col = top.col;
              
              if(col+1 < n){
                  int ele = KSortedArray[row][col+1];
                  data curr(ele, row, col+1);
                  // update maxi element
                  maxi = max(ele, maxi);
                  minHeap.push(curr);
              }else break;
          }
          
          return {start,end};
          
    }
};
